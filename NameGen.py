import math
import random





class Generate():

    def from_the_letters():

        """Will generate names based on vowel and consonant relationships letter by letter,
           without using existing or provided words

            :param name: the list holding letters while name is constructed
            :type name: str
            
            :return from_letters_name: The generated name
            :rtype: str
        """

        # TO DO: Need to define which letters are allowed to appear near eachother
            # Vowels that can appear together: A:I, A:E, A:U | E:A, E:E, E:I, E:O, E:U | 
            #                                  I:A, I:E, I:O, I:U | O:A, O:I, O:O, O:U | 
            #                                  U:A, U:E, U:I, U:O, U:U

class Construct():

    def noun_verb():
        
        
        """Will construct names based on a noun-verb relationship
        
        :param noun: nouns that will be used for the ocnstruction
        :type noun: list
        
        :param verb: verbs that will be used for the construction
        :type verb: list
        """

    def adj_noun():

        """Will construct names based on an adjective-noun relationship
        
        :param adj: adjectives that will be used for the ocnstruction
        :type adj: list
        
        :param noun: nouns that will be used for the construction
        :type noun: list
        """

    def age():

        """Will apply a multitude of aging effects to the name generated by previous functions 
        Changes include: 
            Conflation: Melding of similar sounds
            Simplification: Hard to pronounce sounds are removed
            Elaboration: Modifier words added to names to distinguish them from other similar names, 
                        or to add distinction in the form of adjectives
            """